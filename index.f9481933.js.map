{"mappings":"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","sources":["src/state.ts","src/pages/home/home.ts","src/pages/instructions/instructions.ts","src/pages/game-countdown/game-countdown.ts","node_modules/@parcel/runtime-js/lib/runtime-f902631359bdb7e4c77277305ad9b897.js","node_modules/@parcel/runtime-js/lib/bundle-url.js","node_modules/@parcel/runtime-js/lib/runtime-7efbafcad00769af337142abe59802f1.js","node_modules/@parcel/runtime-js/lib/runtime-4442256b95f5b61b7950cae8813342df.js","src/pages/result/result.ts","node_modules/@parcel/runtime-js/lib/runtime-588e5b6f747da1b76b957cebcab54baa.js","node_modules/@parcel/runtime-js/lib/runtime-a3947952839c01207cb0b975a9efcc5f.js","node_modules/@parcel/runtime-js/lib/runtime-83452b973a6d5c02db605063c2e3d30f.js","src/components/hand-component/hand-component.ts","src/components/custom-button/custom-button.ts","src/index.ts","src/router.ts"],"sourcesContent":["// Auxiliar types\r\ntype Move = \"rock\" | \"paper\" | \"scissors\";\r\ntype Result = \"userWin\" | \"computerWin\" | \"tiedGame\";\r\n\r\n// State\r\nconst state = {\r\n    // Main data\r\n    data: {\r\n        // Current game data\r\n        currentGame: {\r\n            computerMove: \"none\",\r\n            myMove: \"none\",\r\n        },\r\n\r\n        // Game history\r\n        history: {\r\n            userWins: 0,\r\n            computerWins: 0,\r\n        },\r\n    },\r\n\r\n    // State listeners\r\n    listeners: [],\r\n\r\n    // Getter\r\n    getState() {\r\n        return this.data;\r\n    },\r\n\r\n    // Setter\r\n    setState(newState) {\r\n        this.data = newState;\r\n\r\n        // Save the changes made to the state\r\n        localStorage.setItem(\"games-data\", JSON.stringify(this.data));\r\n\r\n        for (const cb of this.listeners) {\r\n            cb();\r\n        }\r\n    },\r\n\r\n    // Set move method\r\n    setMove(movement: Move, player: \"computerMove\" | \"myMove\") {\r\n        // Get the current state\r\n        const currentState = this.getState();\r\n\r\n        // Change the move from the current game\r\n        currentState[\"currentGame\"][player] = movement;\r\n\r\n        // Set the state changes\r\n        this.setState(currentState);\r\n    },\r\n\r\n    // Current game getter\r\n    getCurrentGame() {\r\n        // Get the current state\r\n        const currentState = this.getState();\r\n\r\n        return currentState.currentGame;\r\n    },\r\n\r\n    // Restart game method\r\n    restartGame() {\r\n        // Get the current State\r\n        const currentState = this.getState();\r\n\r\n        // Change values to the initial\r\n        currentState.currentGame.computerMove = \"none\";\r\n        currentState.currentGame.myMove = \"none\";\r\n\r\n        this.setState(currentState);\r\n    },\r\n\r\n    // Set winner method\r\n    getResult(myMove: Move, computerMove: Move) {\r\n        // Aux variables\r\n        const userWin = [\r\n            myMove === \"rock\" && computerMove === \"scissors\",\r\n            myMove === \"paper\" && computerMove === \"rock\",\r\n            myMove === \"scissors\" && computerMove === \"paper\",\r\n        ].includes(true);\r\n        const computerWin = [\r\n            computerMove === \"rock\" && myMove === \"scissors\",\r\n            computerMove === \"paper\" && myMove === \"rock\",\r\n            computerMove === \"scissors\" && myMove === \"paper\",\r\n        ].includes(true);\r\n\r\n        // Result variable\r\n        let gameResult: Result;\r\n\r\n        // Change the winner history, depending on the result\r\n        if (userWin) {\r\n            gameResult = \"userWin\";\r\n        } else if (computerWin) {\r\n            gameResult = \"computerWin\";\r\n        } else {\r\n            gameResult = \"tiedGame\";\r\n        }\r\n\r\n        return gameResult;\r\n    },\r\n\r\n    // History setter/change\r\n    changeHistory(gameResult: Result) {\r\n        // Get the current state\r\n        const currentState = this.getState();\r\n\r\n        // Change the history, depending on the result\r\n        if (gameResult === \"userWin\") {\r\n            currentState.history.userWins += 1;\r\n        } else if (gameResult === \"computerWin\") {\r\n            currentState.history.computerWins += 1;\r\n        }\r\n\r\n        // Set the new state\r\n        this.setState(currentState);\r\n    },\r\n\r\n    // Init state method\r\n    init() {\r\n        // Get the local data\r\n        const localData = JSON.parse(localStorage.getItem(\"games-data\"));\r\n\r\n        this.setState(localData);\r\n    },\r\n};\r\n\r\n// EXPORT\r\nexport { state, Move };\r\n","export function initHomePage(params) {\r\n    // Create the Home Page container\r\n    const homePageCont = document.createElement(\"div\");\r\n    homePageCont.setAttribute(\"class\", \"home\");\r\n\r\n    // Give content to the container\r\n    homePageCont.innerHTML = `\r\n        <h1 class=\"game-title\">Piedra, Papel, รณ Tijeras</h1>\r\n\r\n        <custom-button text=\"Empezar\"></custom-button>\r\n\r\n        <div class=\"hands-container-home\">\r\n            <hand-comp hand=\"scissors\"></hand-comp>\r\n            <hand-comp hand=\"rock\"></hand-comp>\r\n            <hand-comp hand=\"paper\"></hand-comp>\r\n        </div>`;\r\n\r\n    // Add an event listener to the button\r\n    const buttonEl = homePageCont.querySelector(\"custom-button\");\r\n\r\n    buttonEl.addEventListener(\"click\", () => {\r\n        // Go to the next page\r\n        params.goToFunction(\"/dwf-m5-desafio/instructions\");\r\n    });\r\n\r\n    return homePageCont;\r\n}\r\n","export function initInstructionsPage(params) {\r\n    // Create the Instructions Page container\r\n    const instructionsPageCont = document.createElement(\"div\");\r\n    instructionsPageCont.setAttribute(\"class\", \"instructions\");\r\n\r\n    // Give content to the container\r\n    instructionsPageCont.innerHTML = `\r\n    <p class=\"instructions-text\">\r\n    Presionรก jugar y elegรญ: piedra, papel o tijera antes de que\r\n    pasen los 5 segundos.\r\n    </p>\r\n    <custom-button text=\"ยกJugar!\"></custom-button>\r\n    <div class=\"hands-container\">\r\n    <hand-comp hand=\"scissors\"></hand-comp>\r\n    <hand-comp hand=\"rock\"></hand-comp>\r\n    <hand-comp hand=\"paper\"></hand-comp>\r\n    </div>`;\r\n\r\n    // Add an event listener to the button, in order to redirect to the game countdown\r\n    const buttonEl = instructionsPageCont.querySelector(\"custom-button\");\r\n    buttonEl.addEventListener(\"click\", () => {\r\n        params.goToFunction(\"/dwf-m5-desafio/game-countdown\");\r\n    });\r\n\r\n    return instructionsPageCont;\r\n}\r\n","import { state, Move } from \"../../state\";\r\n\r\n// Random select function\r\nfunction randomMoveChoice(): Move {\r\n    const possibleMoves: Move[] = [\"rock\", \"paper\", \"scissors\"];\r\n    const pickedMove: Move =\r\n        possibleMoves[Math.floor(Math.random() * possibleMoves.length)];\r\n\r\n    return pickedMove;\r\n}\r\n\r\n// Page function\r\nexport function initGameCountdownPage(params) {\r\n    // Aux variables\r\n    let timeLimit: number = 5;\r\n\r\n    // Create the Instructions Page container\r\n    const gamePageCont = document.createElement(\"div\");\r\n    gamePageCont.setAttribute(\"class\", \"game-countdown\");\r\n\r\n    // Give content to the container\r\n    gamePageCont.innerHTML = `\r\n    <h2 class=\"countdown-timer\">${timeLimit}</h2>\r\n    <div class=\"hands-container-countdown\">\r\n        <hand-comp hand=\"scissors\"></hand-comp>\r\n        <hand-comp hand=\"rock\"></hand-comp>\r\n        <hand-comp hand=\"paper\"></hand-comp>\r\n    </div>`;\r\n\r\n    // Get the hand components\r\n    const handComponents = gamePageCont.querySelectorAll(\"hand-comp\");\r\n\r\n    // Add event listeners to the hand components, in order to change their styles\r\n    handComponents.forEach((hand) => {\r\n        hand.addEventListener(\"handClick\", (e: any) => {\r\n            // Get the selected Move\r\n            const selectedMove = e.detail.handMove;\r\n\r\n            // Set move from state\r\n            state.setMove(selectedMove, \"myMove\");\r\n\r\n            // Loop all over the hand components, in order to activate one, and deactivate the rest of them\r\n            handComponents.forEach((auxHand) => {\r\n                // Get the image element\r\n                const imageEl = auxHand.shadowRoot.querySelector(\".hand\");\r\n\r\n                // If the selected move is not equal to the aux hand, just deactivate it\r\n                if (auxHand.getAttribute(\"hand\") !== selectedMove) {\r\n                    imageEl.classList.add(\"inactive-hand\");\r\n                    imageEl.classList.remove(\"active-hand\");\r\n                }\r\n\r\n                // But, if it is equal to the aux hand, activate it\r\n                else if (auxHand.getAttribute(\"hand\") === selectedMove) {\r\n                    imageEl.classList.add(\"active-hand\");\r\n                    imageEl.classList.remove(\"inactive-hand\");\r\n                }\r\n            });\r\n        });\r\n    });\r\n\r\n    // Make the computer move\r\n    state.setMove(randomMoveChoice(), \"computerMove\");\r\n\r\n    // Get the countdown timer\r\n    const countdownTimerEl = gamePageCont.querySelector(\".countdown-timer\");\r\n\r\n    // Timer handling, to take the user Move\r\n    const timerIntervalID = setInterval(() => {\r\n        // The timer stops when it gets to 0\r\n        if (timeLimit === 0) {\r\n            // Break the time interval\r\n            clearInterval(timerIntervalID);\r\n\r\n            // Get the current game\r\n            const currentGame = state.getCurrentGame();\r\n\r\n            // Check the user selection\r\n            if (currentGame.myMove === \"none\") {\r\n                // Make a random move\r\n                state.setMove(randomMoveChoice(), \"myMove\");\r\n            }\r\n\r\n            // Show both Moves\r\n            gamePageCont.classList.add(\"game-hands-show\");\r\n\r\n            gamePageCont.innerHTML = `\r\n            <hand-comp hand=${currentGame.computerMove} class=\"computer-hand\" height=\"215px\" width=\"90px\"></hand-comp>\r\n            <hand-comp hand=${currentGame.myMove} class=\"user-hand\" height=\"215px\" width=\"90px\"></hand-comp>\r\n            `;\r\n\r\n            // Send to the Result page\r\n            setTimeout(() => {\r\n                params.goToFunction(\"/dwf-m5-desafio/result\");\r\n            }, 4000);\r\n        }\r\n\r\n        // Change the countdown number showed\r\n        countdownTimerEl.textContent = timeLimit.toString();\r\n\r\n        // Reduce the time\r\n        timeLimit -= 1;\r\n    }, 1000);\r\n\r\n    return gamePageCont;\r\n}\r\n","module.exports = require('./bundle-url').getBundleURL() + \"userWin.5ece265f.svg\"","\"use strict\";\n\n/* globals document:readonly */\nvar bundleURL = null;\n\nfunction getBundleURLCached() {\n  if (!bundleURL) {\n    bundleURL = getBundleURL();\n  }\n\n  return bundleURL;\n}\n\nfunction getBundleURL() {\n  try {\n    throw new Error();\n  } catch (err) {\n    var matches = ('' + err.stack).match(/(https?|file|ftp):\\/\\/[^)\\n]+/g);\n\n    if (matches) {\n      return getBaseURL(matches[0]);\n    }\n  }\n\n  return '/';\n}\n\nfunction getBaseURL(url) {\n  return ('' + url).replace(/^((?:https?|file|ftp):\\/\\/.+)\\/[^/]+$/, '$1') + '/';\n} // TODO: Replace uses with `new URL(url).origin` when ie11 is no longer supported.\n\n\nfunction getOrigin(url) {\n  let matches = ('' + url).match(/(https?|file|ftp):\\/\\/[^/]+/);\n\n  if (!matches) {\n    throw new Error('Origin not found');\n  }\n\n  return matches[0];\n}\n\nexports.getBundleURL = getBundleURLCached;\nexports.getBaseURL = getBaseURL;\nexports.getOrigin = getOrigin;","module.exports = require('./bundle-url').getBundleURL() + \"computerWin.6da996ab.svg\"","module.exports = require('./bundle-url').getBundleURL() + \"tiedGame.edbb38e5.svg\"","import { state } from \"../../state\";\r\n\r\n// Image routes\r\nconst resultVisual = {\r\n    userWin: require(\"url:../../assets/userWin.svg\"),\r\n    computerWin: require(\"url:../../assets/computerWin.svg\"),\r\n    tiedGame: require(\"url:../../assets/tiedGame.svg\"),\r\n};\r\n\r\n// Page init function\r\nexport function initResultPage(params) {\r\n    // Create the result Page container\r\n    const resultPageCont = document.createElement(\"div\");\r\n    resultPageCont.setAttribute(\"class\", \"result\");\r\n\r\n    // Get the game result\r\n    const currentGame = state.getCurrentGame();\r\n    const gameResult = state.getResult(\r\n        currentGame.myMove,\r\n        currentGame.computerMove\r\n    );\r\n\r\n    // Update the history\r\n    state.changeHistory(gameResult);\r\n\r\n    // Get the state, and the current history\r\n    const currentHistory = state.getState().history;\r\n\r\n    // After that, clear the current game from the state\r\n    state.restartGame();\r\n\r\n    // Give content to the container\r\n    resultPageCont.innerHTML = `\r\n    <div class=\"image-container\"> \r\n        <img src=${resultVisual[gameResult]} class=\"result-image\" />\r\n    </div>\r\n\r\n    <div class=\"score-container\">\r\n        <h2 class=\"score-container__title\">Score</h2>\r\n        <article class=\"score-container__data\">\r\n            <h3 class=\"score-container__user-data score\">Vos: ${currentHistory.userWins}</h3>\r\n            <h3 class=\"score-container__computer-data score\">\r\n                Mรกquina: ${currentHistory.computerWins}\r\n            </h3>\r\n        </article>\r\n    </div>\r\n\r\n    <div class=\"button-container\">\r\n        <custom-button text=\"Volver a jugar\"></custom-button>\r\n    </div>`;\r\n\r\n    // Add an event listener to the button\r\n    const buttonEl = resultPageCont.querySelector(\"custom-button\");\r\n    buttonEl.addEventListener(\"click\", () => {\r\n        params.goToFunction(\"/dwf-m5-desafio/instructions\");\r\n    });\r\n\r\n    return resultPageCont;\r\n}\r\n","module.exports = require('./bundle-url').getBundleURL() + \"piedra.2f1d17d5.png\"","module.exports = require('./bundle-url').getBundleURL() + \"papel.3c863b52.png\"","module.exports = require('./bundle-url').getBundleURL() + \"tijera.f61c75f8.png\"","// Hand files\r\nconst handFiles = {\r\n    rock: require(\"url:../../assets/piedra.png\"),\r\n    paper: require(\"url:../../assets/papel.png\"),\r\n    scissors: require(\"url:../../assets/tijera.png\"),\r\n};\r\n\r\n// Comp function\r\nexport function initHandComponent() {\r\n    // Create the class\r\n    class HandComponent extends HTMLElement {\r\n        // Initial properties\r\n        shadow: ShadowRoot;\r\n\r\n        // Constructor\r\n        constructor() {\r\n            // Inherit all properties\r\n            super();\r\n\r\n            // Create the Shadow DOM\r\n            this.shadow = this.attachShadow({ mode: \"open\" });\r\n        }\r\n\r\n        // Connect the component to the DOM\r\n        connectedCallback() {\r\n            this.render();\r\n        }\r\n\r\n        // Method that adds listeners to the custom element\r\n        addListeners() {\r\n            // Get the hand image\r\n            const handImg: HTMLElement = this.shadow.querySelector(\".hand\");\r\n\r\n            // Create a custom event, that returns the hand selected by the user\r\n            this.addEventListener(\"click\", () => {\r\n                // Create the custom event\r\n                const handClickEvent = new CustomEvent(\"handClick\", {\r\n                    detail: {\r\n                        handMove: this.getAttribute(\"hand\"),\r\n                    },\r\n                });\r\n\r\n                // Dispatch the event\r\n                this.dispatchEvent(handClickEvent);\r\n            });\r\n        }\r\n\r\n        // Render method\r\n        render() {\r\n            // Get the selected hand\r\n            const handType = this.getAttribute(\"hand\") || \"rock\";\r\n\r\n            // Get the size attributes\r\n            const heightAttr = this.getAttribute(\"height\") || \"175px\";\r\n            const widthAttr = this.getAttribute(\"width\") || \"70px\";\r\n\r\n            // Create the img element\r\n            const imgEl = document.createElement(\"img\");\r\n            imgEl.setAttribute(\"src\", handFiles[handType]);\r\n            imgEl.setAttribute(\"class\", \"hand\");\r\n\r\n            // Create styles\r\n            const handStyles = document.createElement(\"style\");\r\n            handStyles.innerHTML = `\r\n                * {\r\n                    box-sizing: border-box;\r\n                }\r\n\r\n                .hand {\r\n                    height: ${heightAttr};\r\n                    width: ${widthAttr};\r\n\r\n                    transform: translateY(30px);\r\n                    transition: all 0.3s ease-in-out;\r\n                    cursor: pointer;\r\n                }\r\n\r\n                .active-hand {\r\n                    transform: translateY(5px);\r\n                    transition: all 0.3s ease-in-out;\r\n                }\r\n\r\n                .inactive-hand {\r\n                    opacity: 45%;\r\n                    transition: all 0.3s ease-in-out;\r\n                }`;\r\n\r\n            // Append the element to the shadow\r\n            this.shadow.appendChild(handStyles);\r\n            this.shadow.appendChild(imgEl);\r\n\r\n            // Add the listeners to the component\r\n            this.addListeners();\r\n        }\r\n    }\r\n\r\n    // Define the component\r\n    customElements.define(\"hand-comp\", HandComponent);\r\n}\r\n","export function initCustomButton() {\r\n    // Create the class\r\n    class CustomButton extends HTMLElement {\r\n        // Initial properties\r\n        shadow: ShadowRoot;\r\n\r\n        // Constructor\r\n        constructor() {\r\n            // Inherit all properties\r\n            super();\r\n\r\n            // Create the Shadow DOM\r\n            this.shadow = this.attachShadow({ mode: \"open\" });\r\n        }\r\n\r\n        // Connect the component with the DOM\r\n        connectedCallback() {\r\n            this.render();\r\n        }\r\n\r\n        // Render method\r\n        render() {\r\n            // Get the button text\r\n            const buttonText = this.getAttribute(\"text\") || \"Empezar\";\r\n\r\n            // Create the button element\r\n            const buttonEl = document.createElement(\"button\");\r\n            buttonEl.setAttribute(\"class\", \"custom-button\");\r\n\r\n            // Create styles\r\n            const buttonStyles = document.createElement(\"style\");\r\n            buttonStyles.innerHTML = `\r\n            * {\r\n                box-sizing: border-box;\r\n            }\r\n            \r\n            .custom-button {\r\n                width: 100%;\r\n                padding: 10px;\r\n                \r\n                font-family: inherit;\r\n                font-size: 45px;\r\n                background-color: #006cfc;\r\n                color: white;\r\n                border: solid 10px #001997;\r\n                border-radius: 10px;\r\n                cursor: pointer;\r\n                transition: opacity 0.3s ease;\r\n            }\r\n            \r\n            .custom-button:hover {\r\n                opacity: 0.85;\r\n            }`;\r\n\r\n            // Set the button textContent\r\n            buttonEl.textContent = buttonText;\r\n\r\n            // Append the styles to the shadow, and finally the element\r\n            this.shadow.appendChild(buttonStyles);\r\n            this.shadow.appendChild(buttonEl);\r\n        }\r\n    }\r\n\r\n    // Define the component\r\n    customElements.define(\"custom-button\", CustomButton);\r\n}\r\n","import { state } from \"./state\";\r\nimport { initRouter } from \"./router\";\r\nimport { initCustomButton } from \"./components/custom-button/custom-button\";\r\nimport { initHandComponent } from \"./components/hand-component/hand-component\";\r\n\r\n// Main function\r\n(function () {\r\n    // Init components\r\n    initCustomButton();\r\n    initHandComponent();\r\n\r\n    // TODO Init the state\r\n    state.init();\r\n\r\n    // Init the router\r\n    initRouter(document.querySelector(\"#root\"));\r\n})();\r\n","import { initHomePage } from \"./pages/home/home\";\r\nimport { initInstructionsPage } from \"./pages/instructions/instructions\";\r\nimport { initGameCountdownPage } from \"./pages/game-countdown/game-countdown\";\r\nimport { initResultPage } from \"./pages/result/result\";\r\n\r\n// Init router function\r\nexport function initRouter(container: Element) {\r\n    // Routes collection\r\n    const routes = [\r\n        {\r\n            path: /\\/dwf-m5-desafio\\/home/,\r\n            page: initHomePage,\r\n        },\r\n\r\n        {\r\n            path: /\\/dwf-m5-desafio\\/instructions/,\r\n            page: initInstructionsPage,\r\n        },\r\n\r\n        {\r\n            path: /\\/dwf-m5-desafio\\/game-countdown/,\r\n            page: initGameCountdownPage,\r\n        },\r\n\r\n        {\r\n            path: /\\/dwf-m5-desafio\\/result/,\r\n            page: initResultPage,\r\n        },\r\n    ];\r\n\r\n    // Function that handles history\r\n    function goTo(path: string) {\r\n        history.pushState({}, \"\", path);\r\n        handleRoute(path);\r\n    }\r\n\r\n    // Function that handles the route\r\n    function handleRoute(route: string) {\r\n        // Loop all over the routes collection\r\n        for (const r of routes) {\r\n            if (r.path.test(route)) {\r\n                // Get the page container\r\n                const pageContainer = r.page({ goToFunction: goTo });\r\n\r\n                // If there's content in the page, remove it first\r\n                if (container.firstChild) {\r\n                    container.firstChild.remove();\r\n                }\r\n\r\n                console.log(pageContainer);\r\n\r\n                // Append the page container, to the root container\r\n                container.appendChild(pageContainer);\r\n            }\r\n        }\r\n    }\r\n\r\n    // If the route is just \"/\"\r\n    if (location.pathname === \"/\") {\r\n        goTo(\"/home\");\r\n    } else {\r\n        // Handle the route for the first time\r\n        handleRoute(location.pathname);\r\n    }\r\n\r\n    // Set the router behaviour for navigator surfing\r\n    window.onpopstate = () => {\r\n        handleRoute(location.pathname);\r\n    };\r\n}\r\n"],"names":["$3bf3b04a899cbbe9a92c99cd4cfcddb4$export$c837a8b98c265ae3","data","currentGame","computerMove","myMove","history","userWins","computerWins","listeners","getState","setState","newState","localStorage","setItem","JSON","stringify","this","cb","setMove","movement","player","currentState","getCurrentGame","restartGame","getResult","userWin","includes","computerWin","gameResult","changeHistory","init","localData","parse","getItem","$8642764e1a18880dbe5c46cbba32c8db$export$36e0f3cd0ce1227","params","homePageCont","document","createElement","setAttribute","innerHTML","querySelector","addEventListener","goToFunction","$2f0a215b2122e85942561c3135e47af3$export$d1763545d2247ea","instructionsPageCont","$092b55fc6d4869fc4c1935436d87e20f$var$randomMoveChoice","possibleMoves","Math","floor","random","length","$092b55fc6d4869fc4c1935436d87e20f$export$6a92b4eef8053414","timeLimit","gamePageCont","handComponents","querySelectorAll","forEach","hand","e","selectedMove","detail","handMove","auxHand","imageEl","shadowRoot","getAttribute","classList","add","remove","countdownTimerEl","timerIntervalID","setInterval","clearInterval","setTimeout","textContent","toString","module","exports","parcelRequire","getBundleURL","$10da859f8926f997eca867931986be87$var$bundleURL","$10da859f8926f997eca867931986be87$var$getBaseURL","url","replace","$10da859f8926f997eca867931986be87$export$da289beea9c5b10d","Error","err","matches","stack","match","$10da859f8926f997eca867931986be87$var$getBundleURL","$6bf4ed95217546e803a996e519ea7bf7$var$resultVisual","tiedGame","$6bf4ed95217546e803a996e519ea7bf7$export$beabae3eebdf318c","resultPageCont","currentHistory","$0cf1cb4b96a8b54fe540e7136d4699d1$var$handFiles","rock","paper","scissors","CustomButton","HTMLElement","super","shadow","attachShadow","mode","connectedCallback","render","buttonText","buttonEl","buttonStyles","appendChild","customElements","define","$af262d9efe62e517a8a7c4311f4ee984$export$1713e66270b3a123","HandComponent","addListeners","handClickEvent","CustomEvent","dispatchEvent","handType","heightAttr","widthAttr","imgEl","handStyles","$0cf1cb4b96a8b54fe540e7136d4699d1$export$8f0fc230d64555c0","container","routes","path","page","goTo","pushState","handleRoute","route","r","test","pageContainer","firstChild","console","log","location","pathname","window","onpopstate","$9e876f2cce4bbc7ebf26ded1f367ede6$export$f03b0d45d4202f55"],"version":3,"file":"index.f9481933.js.map"}